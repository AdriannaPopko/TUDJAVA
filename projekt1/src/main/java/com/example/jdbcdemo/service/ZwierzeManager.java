package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Zwierze;

public class ZwierzeManager {

    private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTableZwierze = "CREATE TABLE Zwierze(zwierze_id bigint GENERATED BY DEFAULT AS IDENTITY, imie varchar(20), gatunek varchar(20), gatunek varchar(20), opiekun_id bigint, wlasciciel_id bigint)";

    private PreparedStatement DodajZwierze;
    private PreparedStatement UsunZwierzeta;
    private PreparedStatement UsunZwierze;
    private PreparedStatement GetZwierzeta;
    private PreparedStatement UpdateZwierze;

    private Statement statement;

    public ZwierzeManager() {
        try {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null,
                    null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Zwierze".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableZwierze);

            DodajZwierze = connection
                    .prepareStatement("INSERT INTO Zwierze (imie, gatunek, data_przyecia, opiekun_id, wlasciciel_id) VALUES (?, ?, ?, ?, ?)");
            UsunZwierzeta = connection
                    .prepareStatement("DELETE FROM Zwierze");
            UsunZwierze = connection
                    .prepareStatement("DELETE FROM Zwierze WHERE zwierze_id = ?");
            GetZwierzeta = connection
                    .prepareStatement("SELECT zwierze_id, imie, gatunek, data_przyjecia, opiekun_id, wlasciciel_id FROM Zwierze");
            UpdateZwierze = connection
                    .prepareStatement("UPDATE Zwierze SET imie = ?, gatunek = ?, data_przyjecia = ?, opiekun_id = ?, wlasciciel_id = ? WHERE zwierze_id = ?");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    void wyczyscZwierzeta() {
        try {
            UsunZwierzeta.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int UsunZwierze(Zwierze zwierze) {
        int count = 0;
        try {
            UsunZwierze.setLong(1, zwierze.getId());

            count = UsunZwierze.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public int dodajZwierze(Zwierze zwierze) {
        int count = 0;
        try {
            DodajZwierze.setString(1, zwierze.getImie());
            DodajZwierze.setString(2, zwierze.getGatunek());
            DodajZwierze.setString(3, zwierze.getData_przyjecia());
            DodajZwierze.setLong(4, zwierze.getOpiekun_id());
            DodajZwierze.setLong(5, zwierze.getWlasciciel_id());

            count = DodajZwierze.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

/*	public List<Opiekun> GetOpiekunow() {
		List<Opiekun> opiekunowie = new ArrayList<Opiekun>();

		try {
			ResultSet rs = GetOpiekunow.executeQuery();

			while (rs.next()) {
				Opiekun p = new Opiekun();
				p.setId(rs.getInt("opiekun_id"));
				p.setImie(rs.getString("imie"));
				p.setNazwisko(rs.getString("nazwisko"));
				p.setNr(rs.getInt("nr_tel"));
				opiekunowie.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return opiekunowie;
	} */

    public List<Zwierze> GetZwierzeta(){
        List<Zwierze> zwierzeta = new ArrayList<Zwierze>();

        try{
            ResultSet rs = GetZwierzeta.executeQuery();

            while(rs.next()){
                Zwierze z = new Zwierze();
                z.setId(rs.getLong("zwierze_id"));
                z.setImie(rs.getString("imie"));
                z.setGatunek(rs.getString("gatunek"));
                z.setData_przyjecia(rs.getString("data_przyjecia"));
                z.setOpiekun_id(rs.getLong("opiekun_id"));
                z.setWlasciciel_id(rs.getLong("wlasciciel_id"));
                zwierzeta.add(z);
            }
        } catch(SQLException e){
            e.printStackTrace();
        }
        return zwierzeta;
    }

    public int updateZwierze(Zwierze zwierze){
        int count = 0;
        try{
            UpdateZwierze.setString(1, zwierze.getImie());
            UpdateZwierze.setString(2, zwierze.getGatunek());
            UpdateZwierze.setLong(3, zwierze.getId());
            UpdateZwierze.setString(4, zwierze.getData_przyjecia());
            UpdateZwierze.setLong(5, zwierze.getOpiekun_id());
            UpdateZwierze.setLong(6, zwierze.getWlasciciel_id());


            count = UpdateZwierze.executeUpdate();
        }catch(SQLException e){
            e.printStackTrace();
        }
        return count;
    }

}
